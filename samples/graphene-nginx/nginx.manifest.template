# Nginx manifest example
#
# This manifest was prepared and tested on Ubuntu 18.04.

# MARBLERUN: entrypoint must be premain-libos
libos.entrypoint = "premain-libos"

# Path to the library OS
loader.preload = "file:{{ graphene.libos }}"

# Graphene log level
loader.log_level = "{{ log_level }}"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = true

# Environment variables
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/local/lib:/usr/lib:/usr/{{ arch_libdir }}"

# Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = true

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by Nginx.
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

# Host-level libraries (e.g., /usr/lib/x86_64-linux-gnu) required by Nginx with SSL.
fs.mount.lib3.type = "chroot"
fs.mount.lib3.path = "/usr{{ arch_libdir }}"
fs.mount.lib3.uri = "file:/usr{{ arch_libdir }}"

# Host-level libraries required by Nginx with SSL.
fs.mount.lib4.type = "chroot"
fs.mount.lib4.path = "/usr/local/lib"
fs.mount.lib4.uri = "file:/usr/local/lib"

# Host-level directory to NSS files required by Glibc + NSS libs.
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Mount the current working directory
fs.mount.cwd.type = "chroot"
fs.mount.cwd.path = "{{ install_dir_abspath }}"
fs.mount.cwd.uri = "file:{{ install_dir }}"

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If Nginx needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
# MARBLERUN: enclave must have enough memory for Go runtime of premain
sgx.enclave_size = "1024M"

sgx.nonpie_binary = true

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
#
# We (somewhat arbitrarily) specify 4 threads since Nginx is single-threaded.
# MARBLERUN: enclave must have enough threads for Go runtime of premain
sgx.thread_num = 16

# Nginx benefits from Exitless. Uncomment the below line to use it.
#sgx.rpc_thread_num = 4


# SGX trusted files
sgx.trusted_files.nginx = "file:{{ install_dir }}/sbin/nginx"
sgx.trusted_files.conf_dir = "file:{{ install_dir }}/conf/"
sgx.trusted_files.html_dir = "file:{{ install_dir }}/html/"
# MARBLERUN: these are provisioned by the Coordinator
# WORKAROUND: These need to be specified in the same way as Marblerun accesses them: https://github.com/oscarlab/graphene/issues/2622
sgx.protected_files.cert    = "file:install/conf/server.crt"
sgx.protected_files.privkey = "file:install/conf/server.key"

sgx.trusted_files.runtime = "file:{{ graphene.runtimedir() }}/"
sgx.trusted_files.arch_libdir = "file:{{ arch_libdir }}/"
sgx.trusted_files.usr_arch_libdir = "file:/usr/{{ arch_libdir }}/"

# Nginx logs directory (untrusted and allowed, since log files are not security-critical)
sgx.allowed_files.logs = "file:{{ install_dir }}/logs"

# Name Service Switch (NSS) files (Glibc reads these files)
sgx.allowed_files.nsswitch = "file:/etc/nsswitch.conf"
sgx.allowed_files.ethers = "file:/etc/ethers"
sgx.allowed_files.hosts = "file:/etc/hosts"
sgx.allowed_files.group = "file:/etc/group"
sgx.allowed_files.passwd = "file:/etc/passwd"

# MARBLERUN: must trust premain-libos
sgx.trusted_files.premain = "file:premain-libos"

# MARBLERUN: argv0 must be the path to the actual application
loader.argv0_override = "{{ install_dir }}/sbin/nginx"

# MARBLERUN: Forward Marble related environment variables from the host.
loader.env.EDG_MARBLE_COORDINATOR_ADDR = { passthrough = true }
loader.env.EDG_MARBLE_TYPE = { passthrough = true }
loader.env.EDG_MARBLE_UUID_FILE = { passthrough = true }
loader.env.EDG_MARBLE_DNS_NAMES = { passthrough = true }

# MARBLERUN: allow the marble's uuid file
sgx.allowed_files.uuid = "file:uuid"

# MARBLERUN: enable DCAP
sgx.remote_attestation = 1
