loader.preload = "file:{{ graphene.libos }}"
loader.env.LD_LIBRARY_PATH = "/lib"

# entrypoint must be premain-libos
libos.entrypoint = "premain-libos"
sgx.trusted_files.premain = "file:premain-libos"

# argv0 must be the path to the actual application
loader.argv0_override = "hello"

# Forward Marble related environment variables from the host.
loader.env.EDG_MARBLE_COORDINATOR_ADDR = { passthrough = true }
loader.env.EDG_MARBLE_TYPE = { passthrough = true }
loader.env.EDG_MARBLE_UUID_FILE = { passthrough = true }
loader.env.EDG_MARBLE_DNS_NAMES = { passthrough = true }

fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

sgx.trusted_files.ld = "file:{{ graphene.runtimedir() }}/ld-linux-x86-64.so.2"
sgx.trusted_files.libc = "file:{{ graphene.runtimedir() }}/libc.so.6"
sgx.trusted_files.pthread = "file:{{ graphene.runtimedir() }}/libpthread.so.0"
sgx.trusted_files.hello = "file:hello"

# allow the marble's uuid file
sgx.allowed_files.uuid = "file:uuid"

# enable DCAP
sgx.remote_attestation = 1

# enclave must have enough memory and threads
sgx.enclave_size = "1024M"
sgx.thread_num = 16

# the following is only required if you need DNS resolution
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"
sgx.trusted_files.nss = "file:{{ graphene.runtimedir() }}/libnss_dns.so.2"
sgx.trusted_files.nss_files = "file:{{ graphene.runtimedir() }}/libnss_files.so.2"
sgx.trusted_files.resolv = "file:{{ graphene.runtimedir() }}/libresolv.so.2"
sgx.allowed_files.hosts = "file:/etc/hosts"
sgx.allowed_files.host_conf = "file:/etc/host.conf"
sgx.allowed_files.gai_conf = "file:/etc/gai.conf"
sgx.allowed_files.resolv_conf = "file:/etc/resolv.conf"
sgx.allowed_files.localtime = "file:/etc/localtime"


# Name Service Switch (NSS) files, see 'man nsswitch.conf'
sgx.allowed_files.nsswitch  = "file:/etc/nsswitch.conf"
